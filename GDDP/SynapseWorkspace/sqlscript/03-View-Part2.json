{
	"name": "03-View-Part2",
	"properties": {
		"folder": {
			"name": "ServerlessPool"
		},
		"content": {
			"query": "--USE [ServerlessPool]\n--GO\n\nCREATE OR ALTER VIEW [dbo].[PipelineLogsConsolidated] AS\nWITH RawData AS (\n    SELECT\n        [SubscriptionId] = CAST([r].filepath(1) AS VARCHAR(36))\n        ,[ResourceGroup] = CAST([r].filepath(2) AS VARCHAR(100))\n        ,[FactoryName] = CAST([r].filepath(3) AS VARCHAR(100))\n        ,[Year] = CAST([r].filepath(4) AS VARCHAR(4))\n        ,[Month] = CAST([r].filepath(5) AS VARCHAR(2))\n        ,[Day] = CAST([r].filepath(6) AS VARCHAR(2))\n        ,[Hour] = CAST([r].filepath(7) AS VARCHAR(2))\n        ,[PipelineRunId] = CAST(JSON_VALUE(jsonContent, '$.runId') AS VARCHAR(100))\n        ,[PipelineName] = CAST(JSON_VALUE(jsonContent, '$.pipelineName') AS VARCHAR(100))\n        ,[Time] = TRY_CAST(JSON_VALUE(jsonContent, '$.time') AS DATETIME2(3))\n        ,[Start] = TRY_CAST(JSON_VALUE(jsonContent, '$.start') AS DATETIME2(0))\n        ,[End] = NULLIF(TRY_CAST(JSON_VALUE(jsonContent, '$.end') AS DATETIME2(0)),'1601-01-01 00:00:00.0000000') \n        ,[Status] = CAST(JSON_VALUE(jsonContent, '$.status') AS VARCHAR(100))\n        ,[ErrorMessage] = CAST(NULLIF(JSON_VALUE(JSON_QUERY(jsonContent,'$.properties'), '$.Message'),'') AS VARCHAR(500))\n        ,[EnvironmentName] = CAST(JSON_VALUE(JSON_VALUE(jsonContent, '$.tags'),'$.Environment') AS VARCHAR(100))\n        --,jsonContent\n    FROM OPENROWSET(\n            BULK 'https://staplaygroundlogs.blob.core.windows.net/insights-logs-pipelineruns/resourceId=/SUBSCRIPTIONS/*/RESOURCEGROUPS/*/PROVIDERS/MICROSOFT.DATAFACTORY/FACTORIES/*/y=*/m=*/d=*/h=*/m=*/*.json'\n            , FORMAT = 'CSV'\n            , FIELDTERMINATOR = '0x0b'\n            , FIELDQUOTE = '0x0b'\n        ) WITH (\n            jsonContent VARCHAR(max)\n        ) AS [r]\n), DataPreparation as (\n    SELECT \n        m.*\n        ,[Start_LocalTime] = CONVERT(datetime, SWITCHOFFSET([Start], DATEPART(TZOFFSET, [Start] AT TIME ZONE 'Romance Standard Time')))\n        ,[End_LocalTime] = CONVERT(datetime, SWITCHOFFSET([End], DATEPART(TZOFFSET, [End] AT TIME ZONE 'Romance Standard Time')))\n        ,[MaxTime] = MAX([Time]) OVER (PARTITION BY [PipelineName])\n    FROM\n        RawData m\n)\nSELECT p.[SubscriptionId]\n    ,p.[ResourceGroup]\n    ,p.[FactoryName]\n    ,p.[PipelineRunId]\n    ,p.[PipelineName]\n    ,p.[Status]\n    ,p.[EnvironmentName]\n    ,p.[ErrorMessage]\n    ,p.[Start_LocalTime]\n    ,p.[End_LocalTime]\n    ,[Duration (second)] = DATEDIFF(SECOND, p.[Start], COALESCE(p.[End], GETDATE()))\n    ,[Duration] = CONVERT(varchar(8), DATEADD(ms, \n        DATEDIFF(SECOND, p.[Start], COALESCE(p.[End], GETDATE()))\n        * 1000, 0), 114)\n    ,[PipelineRunUrl] = CONCAT(\n        'https://adf.azure.com/monitoring/pipelineruns/', p.[PipelineRunId]\n        ,'?factory=%2Fsubscriptions%2F', p.[SubscriptionId]\n        ,'%2FresourceGroups%2F', p.[ResourceGroup]\n        ,'%2Fproviders%2FMicrosoft.DataFactory%2Ffactories%2F',p.[FactoryName]\n        )\n    ,[# Queued] = CASE WHEN p.[Status] = 'Queued' THEN 1 ELSE 0 END\n    ,[# InProgress] = CASE WHEN p.[Status] = 'InProgress' THEN 1 ELSE 0 END\n    ,[# Succeeded] = CASE WHEN p.[Status] = 'Succeeded' THEN 1 ELSE 0 END\n    ,[# Failed] = CASE WHEN p.[Status] = 'Failed' THEN 1 ELSE 0 END\n    ,[# Cancelled] = CASE WHEN p.[Status] = 'Cancelled' THEN 1 ELSE 0 END\n    ,[Status icon] = CASE p.[Status] \n        WHEN 'Succeeded' THEN N'✔️ Succeeded'\n        WHEN 'Failed' THEN N'❌ Failed'\n        WHEN 'Cancelled' THEN N'⛔️ Cancelled'\n        WHEN 'InProgress' THEN N'▶️ In progress'\n        WHEN 'Queued' THEN N'⏸ Queued'\n        END\nFROM\n    DataPreparation p\n    WHERE CONCAT(p.[Year],p.[Month],p.[Day]) BETWEEN CONVERT(varchar(8),DATEADD(dd,-1,GETDATE()),112) AND CONVERT(varchar(8),GETDATE(),112)\n    AND [Time] = [MaxTime]\n\nGO\n\n\nSELECT *\nFROM [dbo].[PipelineLogsConsolidated]",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"name": "ServerlessPool",
				"type": "SqlOnDemand"
			}
		},
		"type": "SqlQuery"
	}
}