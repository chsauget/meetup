{
	"name": "Read and write data from dedicated SQL pool table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/PlayGround/providers/Microsoft.Synapse/workspaces/playgroundeu/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://playgroundeu.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 8,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access Synapse SQL table from Synapse Spark\n",
					"\n",
					"This notebook provides examples of how to read data from Synapse SQL into a Spark context and how to write the output of Spark jobs into an Synapse SQL table.\n",
					"\n",
					"\n",
					"## Limits\n",
					"- Scala is the only supported language by the Spark-SQL connector.\n",
					"- The Spark connector can only read colummns without space in its header in the sql pool.\n",
					"- Columns with time definition in the sql pool not yet supported.\n",
					"- You need to define a container on the workspace's primary or linked storage as the temp data folder.\n",
					"\n",
					"## Pre-requisites\n",
					"You need to be db_owner to read and write in sql pool. Ask your admin to run the following command with your AAD credential:\n",
					"\n",
					"    \n",
					"    EXEC sp_addrolemember 'db_owner', 'AAD@contoso.com'"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [Public Holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets as a sample.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Load sample data from azure open dataset\n",
					"val hol_blob_account_name = \"azureopendatastorage\"\n",
					"val hol_blob_container_name = \"holidaydatacontainer\"\n",
					"val hol_blob_relative_path = \"Processed\"\n",
					"val hol_blob_sas_token = \"\"\n",
					"\n",
					"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
					"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)\n",
					"\n",
					"val hol_df = spark.read.parquet(hol_wasbs_path) \n",
					"\n",
					"println(\"Register the DataFrame as a SQL temporary view: source\")\n",
					"hol_df.createOrReplaceTempView(\"source\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"// Remove datetime from the data source\n",
					"val holiday_nodate = spark.sql(\"SELECT countryOrRegion, holidayName, normalizeHolidayName,isPaidTimeOff,countryRegionCode FROM source\")\n",
					"holiday_nodate.show(5,truncate = false)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write a Spark dataframe into your sql pool\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Write the dataframe into your sql pool\n",
					"import org.apache.spark.sql.SqlAnalyticsConnector._\n",
					"import com.microsoft.spark.sqlanalytics.utils.Constants\n",
					"\n",
					"val sql_pool_name = \"Your sql pool name\" //fill in your sql pool name\n",
					"\n",
					"holiday_nodate.write\n",
					"    .sqlanalytics(s\"$sql_pool_name.dbo.PublicHoliday\", Constants.INTERNAL)\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"source": [
					"Now open Synapse object explorer and go to **Data**->**Databases**->**<your sql pool name>**->**Tables**, you will see the new **dbo.PublicHoliday** table show up there."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read from a SQL Pool table with Spark\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Read  the table we just created in the sql pool as a Spark dataframe\n",
					"val spark_read = spark.read.\n",
					"    sqlanalytics(s\"$sql_pool_name.dbo.PublicHoliday\")\n",
					"spark_read.show(5, truncate = false)"
				],
				"execution_count": 10
			}
		]
	}
}