{
	"name": "DistinctHistoryPosts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ADLS_PostsHistory",
						"type": "DatasetReference"
					},
					"name": "SrcPostHistory"
				},
				{
					"dataset": {
						"referenceName": "ADLS_Posts",
						"type": "DatasetReference"
					},
					"name": "SrcPost"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQDB_HistoryDinstinctPost",
						"type": "DatasetReference"
					},
					"name": "DestHistoryDinstinctPost"
				}
			],
			"transformations": [
				{
					"name": "Distinct"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Exists1"
				},
				{
					"name": "Select1"
				}
			],
			"script": "\n\nsource(output(\n\t\t{_Comment} as string,\n\t\t{_CreationDate} as string,\n\t\t{_Id} as long,\n\t\t{_PostHistoryTypeId} as long,\n\t\t{_PostId} as long,\n\t\t{_RevisionGUID} as string,\n\t\t{_Text} as string,\n\t\t{_UserDisplayName} as string,\n\t\t{_UserId} as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> SrcPostHistory\nsource(output(\n\t\t{_AcceptedAnswerId} as long,\n\t\t{_AnswerCount} as long,\n\t\t{_Body} as string,\n\t\t{_ClosedDate} as string,\n\t\t{_CommentCount} as long,\n\t\t{_CommunityOwnedDate} as string,\n\t\t{_CreationDate} as string,\n\t\t{_FavoriteCount} as long,\n\t\t{_Id} as long,\n\t\t{_LastActivityDate} as string,\n\t\t{_LastEditDate} as string,\n\t\t{_LastEditorDisplayName} as string,\n\t\t{_LastEditorUserId} as long,\n\t\t{_OwnerDisplayName} as string,\n\t\t{_OwnerUserId} as long,\n\t\t{_ParentId} as long,\n\t\t{_PostTypeId} as long,\n\t\t{_Score} as long,\n\t\t{_Tags} as string,\n\t\t{_Title} as string,\n\t\t{_ViewCount} as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> SrcPost\nSort1 aggregate(groupBy(PostId = {_PostId}),\n\teach(match(name != '_PostId'), $$ = toString(first($$)))) ~> Distinct\nSrcPostHistory sort(desc({_CreationDate}, true)) ~> Sort1\nDistinct, SrcPost exists(PostId == SrcPost@{_Id} && {_Text} == {_Body},\n\tnegate:true,\n\tbroadcast: 'none')~> Exists1\nExists1 select(mapColumn(\n\t\tPostId,\n\t\tComment = {_Comment},\n\t\tCreationDate = {_CreationDate},\n\t\tText = {_Text},\n\t\tUserDisplayName = {_UserDisplayName}\n\t)) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false) ~> DestHistoryDinstinctPost"
		}
	}
}